# Use a specific AMD64 version of the Go image
FROM --platform=linux/amd64 golang:1.22-alpine AS builder

# Set the working directory inside the container
WORKDIR /app

# Copy the entire project
COPY . .

# Initialize go module if go.mod doesn't exist
RUN go mod init bird-api || true

# Update go.mod to use the correct Go version
RUN go mod edit -go=1.22

# Download dependencies
RUN go mod tidy

# Build the application
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o bird-api ./main.go

# Use a specific AMD64 version of Alpine
FROM --platform=linux/amd64 alpine:3.14

# Install file command and bash (for debugging)
RUN apk add --no-cache file bash

# Set the working directory
WORKDIR /app

# Copy the binary from the builder stage
COPY --from=builder /app/bird-api .

# Add this diagnostic script (fixed version)
RUN echo '#!/bin/bash' >/app/run.sh
RUN echo 'file /app/bird-api' >>/app/run.sh
RUN echo 'echo "Running bird-api..."' >>/app/run.sh
RUN echo '/app/bird-api' >>/app/run.sh
RUN chmod +x /app/run.sh

# Print the content of run.sh for verification
RUN cat /app/run.sh

# Expose the port the app runs on
EXPOSE 4201

# Use bash to run the script
CMD ["/bin/bash", "/app/run.sh"]
